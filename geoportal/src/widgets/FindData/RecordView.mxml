<?xml version="1.0" encoding="utf-8"?>

<!--
See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
Esri Inc. licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
  backgroundAlpha="0.8">
<mx:Script>
  <![CDATA[
    import com.esri.ags.utils.JSON;
    import com.esri.ags.utils.StringUtil;
    import com.esri.gpt.finddata.*;
    import com.esri.gpt.utils.Utils;
    import com.esri.viewer.utils.Hashtable;

    import flash.net.navigateToURL;
    import flash.profiler.showRedrawRegions;

    import mx.collections.ArrayList;
    import mx.controls.Alert;
    import mx.rpc.AsyncResponder;
    import mx.rpc.AsyncToken;
    import mx.rpc.events.FaultEvent;
    import mx.rpc.events.ResultEvent;
    import mx.rpc.http.HTTPService;

    import widgets.FindData.licensing.LicenseDialog;
    import widgets.FindData.licensing.SecurityServiceClient;

    import widgets.FindData.licensing.TermsOfUseDialog;

    // instance variables ======================================================
    [Bindable]
    private var _record:SearchResultRecord = new SearchResultRecord();

    [Bindable]
    private var _width:Number = 375;

    [Bindable]
    private var _bShowAddToMap:Boolean = false;


    private var _xmlConfig:XML;

    private var _uiMainRssWidget:FindDataWidget;

    private var _endPoint:EndPoint;


    private static var _dctMapsBeingAdded:Dictionary = new Dictionary();

    private var linkType:String;

    private static const ADD2MAPLINK:String = "add2mapLink";
    private static const NAVIGATE2LINK:String = "navigate2Link";
    private var securityServiceUrl:String;
    private var siteUrl:String;


    // properties ==============================================================   
    /**
     * Set the record
     *
     * @param record The record
     * */
    public function set record(record:SearchResultRecord):void {
        if (this._record == null) {
            this._record = new SearchResultRecord();
        } else {
            this._record = record;

        }

    }

    /**
     * Get the record
     *
     * @return the record to be viewed
     * */
    private function get record():SearchResultRecord {
        return this._record;
    }


    /**
     * Sets the end point
     *
     * @param endPoint The endpoint object
     * */
    public function set endPoint(endPoint:EndPoint):void {
        this._endPoint = endPoint;

    }

    /**
     * Gets the end point
     *
     * @return endPoint.  Possibly null.
     * */
    [Bindable]
    public function get endPoint():EndPoint {
        return this._endPoint;
    }

    /**
     * set Configuration XML.  Set once per instance always!
     *
     * @param configXML
     * */
    public function set configXML(configXML:XML):void {
        if (configXML != null) {
            _xmlConfig = configXML;

            securityServiceUrl = _xmlConfig.gptSecurityServiceEndpoint.@url;
            if (!Utils.chkStringMatch(securityServiceUrl.match(":\/\/")).length >= 1 && ExternalInterface.available == true) {

                var location:String = Utils.chkString(ExternalInterface.call("location.href.substring"));
                location = location.substr(0, location.indexOf("?"));
                var regWebContext:String = Utils.chkString(_xmlConfig.regWebContext);
                var arr:Array = Utils.chkStringMatch(location.match(new RegExp(regWebContext)));
                if (arr.length >= 1) {
                    if (securityServiceUrl.indexOf("/") == 0) {
                        securityServiceUrl = arr[0] + securityServiceUrl;
                    } else {
                        securityServiceUrl = arr[0] + "/" + securityServiceUrl;
                    }
                }
            }
        }
    }

    /**
     * Sets the main rss widget.  Set once per instance Always!
     *
     * @param uiMainRssWidget the main rss instance
     * */
    public function set uiMainRssWidget(uiMainRssWidget:FindDataWidget):void {
        this._uiMainRssWidget = uiMainRssWidget;
    }

    /**
     * Get the Rss widget
     *
     * @return instance of AGSGptRSSWidget
     * */
    private function get uiMainRssWidget():FindDataWidget {
        return this._uiMainRssWidget;
    }


    // methods =================================================================
    /**
     * Should be called after all the properties have been set
     *
     * */
    public function init():void {

        showAddToMap();
        this.validateNow();

    }

    /**
     * Show add to map link
     * */
    private function showAddToMap():void {
        _bShowAddToMap = false;
        if (_record.serviceType == null) {
            FindDataWidget.agsGptRssModel.readService(_record,
                    showAddToMapCallback, endPoint);

        } else if (_record.mapServiceUrl != ""
                && _record.serviceType != null) {
            var val:Object =
                    _dctMapsBeingAdded[getMapsBeingAddedKey(_record, endPoint)];
            var bAdding:Boolean = (val != null);
            this.uiAddToMap(bAdding);
            _bShowAddToMap = true;
        }
    }

    /**
     * Call back from showAddToMap
     *
     * @param url The mapservice url
     * @param serviceType The service type
     * @param record the metadata record object
     * */
    private function showAddToMapCallback(url:String, serviceType:EnumServiceTypes, id:String):void {
        if (serviceType == null || Utils.chkString(url) == ""
                || this._record.id != id) {
            return;
        }
        var record:SearchResultRecord = this._record;
        record.serviceType = serviceType;
        record.mapServiceUrl = url
        _bShowAddToMap = true;
        var val:Object =
                _dctMapsBeingAdded[getMapsBeingAddedKey(record, endPoint)];
        var bAdding:Boolean = (val != null);
        this.uiAddToMap(bAdding);

    }

    private static function getMapsBeingAddedKey(record:SearchResultRecord, endPoint:EndPoint):String {
        return record.id + ":" + endPoint.siteUrl;
    }

    /**
     * Add To Map
     * */
    private function doAddToMap():void {
        if (_record == null || _record.id == null || _endPoint == null ||
                _endPoint.siteUrl == null) {
            return;
        }
        _dctMapsBeingAdded[getMapsBeingAddedKey(_record, _endPoint)] =
                new Boolean(true);
        uiAddToMap(true);
        _uiMainRssWidget.doAddToMap(_record, _endPoint)
    }

    /**
     * Notification of the map having been added
     *
     * */
    public function doStopAddToMap(record:SearchResultRecord, endPoint:EndPoint):void {
        if (record == null || record.id == null || endPoint == null
                || endPoint.siteUrl == null || this.endPoint == null ||
                this.endPoint.siteName == null) {
            return;
        }
        _dctMapsBeingAdded[getMapsBeingAddedKey(record, endPoint)]
                = null;

        if (_record.id == record.id && this.endPoint.siteUrl == endPoint.siteUrl) {
            uiAddToMap(false);
        }
    }

    /**
     * User interface changes for Add to map
     *
     * @param adding is true if being added, false if not
     * */
    private function uiAddToMap(adding:Boolean):void {
        swfAddToMap.visible = adding;
        btnAddToMap.useHandCursor = adding;
        btnAddToMap.enabled = !adding;
        if (adding) {
            btnAddToMap.alpha = 0.3;
            swfAddToMap.alpha = 1;
        } else {
            btnAddToMap.alpha = 1;
            swfAddToMap.alpha = 0.3;
        }
        // TODO: Why is this not showing
        this.validateNow();

    }

    private function linkButtonClickHandler(event:Event):void {
        var target:LinkButton = event.currentTarget as LinkButton;
        var url:String;

        if (target && target != null && target.id == "btnAddToMap") {
            url = _record.mapServiceUrl;
            linkType = ADD2MAPLINK;
            //			this.doAddToMap();
        }
        else {
            //Alert.show("target.id: "+target.id);
            url = event.currentTarget.getRepeaterItem().siteUrl;
            linkType = NAVIGATE2LINK;
            //			navigateToURL(new URLRequest(event.currentTarget.getRepeaterItem().siteUrl));
        }
        siteUrl = SecurityServiceClient.parseSiteUrl(url);
        checkUrlAtSecurityService(siteUrl);
    }


    public function licenseSelectedHandler(isLicenseSelected:Boolean, license:Object):void {
        if (isLicenseSelected) {
            TermsOfUseDialog.showTermsOfUse(license, termsOfUseAcceptHandler, 500, 500, true);
        }
    }

    public function termsOfUseAcceptHandler(isAccepted:Boolean, license:Object):void {
        if (isAccepted) {
            getGatewayUrlForLicensedService(siteUrl, license);
        }
    }

    private function checkUrlAtSecurityService(url:String):void {
        var requestParams:Object = {wss:url, f:"json", flexpreventcache:"" + new Date().getTime()};
        var listener:Function = checkUrlResultHandler;
        var faultListener:Function = checkUrlFaultHandler;
        SecurityServiceClient.httpServiceToSecurityService(listener, faultListener, requestParams, "GET", securityServiceUrl);
    }

    private function getGatewayUrlForLicensedService(serviceUrl:String, license:Object):void {
        var licReference:String = license.licenseReference.referenceAsBase64EncodedString;
        var requestParams:Object = {wss:serviceUrl, f:"json", licensereference:licReference, flexpreventcache:"" + new Date().getTime()};
        var listener:Function = getGatewayResultHandler;
        var faultListener:Function = checkUrlFaultHandler;
        SecurityServiceClient.httpServiceToSecurityService(listener, faultListener, requestParams, "POST", securityServiceUrl);
    }



    private function useServiceWithFlexClient(url:String, requestedUrl:String):void {
        var gatewayUrlWithAppendix:String = "";
        if (url == requestedUrl) {
            gatewayUrlWithAppendix = url;
        } else {
            gatewayUrlWithAppendix = (requestedUrl.indexOf('?') > 0) ? url + requestedUrl.substring(requestedUrl.indexOf('?')) : url;
        }
        if (linkType == ADD2MAPLINK) {
            // switch URLS
            _record.mapServiceUrl = gatewayUrlWithAppendix;
            this.doAddToMap();
        }
        else if (linkType == NAVIGATE2LINK) {
            navigateToURL(new URLRequest(gatewayUrlWithAppendix));
        }
    }

    private function getGatewayResultHandler(event:ResultEvent):void {
        var res:String = event.result.toString();
        var data:Object = JSON.decode(res);
        var isSuccess:Boolean = data.success;
        if (isSuccess) {
            var gatewayUrl:String;
            if (data.urls["url.gateway"]) {
                gatewayUrl = data.urls["url.gateway"];
            }
            var requestedUrl:String = data.urls["url.requested"];
            useServiceWithFlexClient(gatewayUrl, requestedUrl);
        }
    }

    private function checkUrlFaultHandler(event:FaultEvent):void {
        var errorCode:String = event.fault.faultString;
        var errorMessage:String = event.fault.faultCode;
        Alert.show(errorCode + " " + errorMessage, resourceManager.getString('gptStrings', 'finddata.errorOccurred'));
    }

    private function checkUrlResultHandler(event:ResultEvent):void {
        var res:String = event.result.toString();
        var data:Object = JSON.decode(res);
        var isSuccess:Boolean = data.success;
        if (isSuccess) {
            var requestedUrl:String = data.urls["url.requested"];
            var returnedWssUrl:String = data.urls["url.wss"];
            var licSsoUrl:String = data.urls["url.lic.sso"];
            var isRequestFailed:Boolean = data.requestFailed;

            var isSecured:Boolean = data.securedService;
            var isLicensed:Boolean = data.licenseBasedService;
            var isLoggedIn:Boolean = data.loggedIn;
            var identity:String = data.identity;
            var isLicenseModelAvailable:Boolean = data.licenseModelAvailable;
            var isGatewayAccessibilityChecked:Boolean = data.gatewayAccessibilityChecked;
            var isGatewayAccessible:Boolean = data.gatewayAccessible;
            var licenseReferences:Array = data.licenseReferences;
            var licenseReferencesHttpAuthUrl:Array = data.licenseReferenceHttpAuthUrls;
            var licenseReferencesTermsOfUse:Array = data.licenseReferenceTermsOfUse;
            var licenses:Hashtable = SecurityServiceClient.parseLicenses(licenseReferences, licenseReferencesHttpAuthUrl, licenseReferencesTermsOfUse);
            // Alert.show(getText(isSuccess, isSecured, isLicensed, isLoggedIn, isLicenseModelAvailable, isGatewayAccessibilityChecked, isGatewayAccessible, licenseReferences.length), "show login dialog");
            if (isLicensed) {
                var licDialog:LicenseDialog;
                if (!isLoggedIn) {
                    // do nothing
                    Alert.show(resourceManager.getString('gptStrings', 'finddata.notLoggedInText'), resourceManager.getString('gptStrings', 'finddata.notLoggedIn'));
                } else {
                    if (!isLicenseModelAvailable) {
                        Alert.show(resourceManager.getString('gptStrings', 'finddata.noLicensesAvailableText'), resourceManager.getString('gptStrings', 'finddata.noLicensesAvailable'));
                    } else if (licenseReferences.length > 0) {
                        if (identity != null && identity.length > 0) {
                            licDialog = new LicenseDialog();
                            licDialog.showLicenseDialog(licenses, licenseSelectedHandler, 500, 800, true, identity, requestedUrl, returnedWssUrl, securityServiceUrl, _record.title);
                        } else {
                            licDialog = new LicenseDialog();
                            licDialog.showLicenseDialog(licenses, licenseSelectedHandler, 500, 800, true);
                        }
                    } else if (licenseReferences.length == 0) {
                        // no licenses available, but license model should be there
                        Alert.show(resourceManager.getString('gptStrings', 'finddata.noLicenseModelAvailableText'), resourceManager.getString('gptStrings', 'finddata.noLicensesAvailable'));
                        if (identity.length > 0) {
                            licDialog = new LicenseDialog();
                            licDialog.showLicenseDialog(licenses, licenseSelectedHandler, 500, 800, true, identity, requestedUrl, returnedWssUrl, securityServiceUrl, _record.title);
                        } else {
                            // we assume her some sort of guest identity, so normaly this will appear when the hidden guest identity is not configured for SecurityService
                            Alert.show(resourceManager.getString('gptStrings', 'finddata.notLoggedInText'), resourceManager.getString('gptStrings', 'finddata.notLoggedIn'));
                        }
                    }
                }
            } else if (isSecured) {
                var gatewayUrl:String;
                if (data.urls["url.gateway"]) {
                    gatewayUrl = data.urls["url.gateway"];
                }
                if (isGatewayAccessibilityChecked && !isGatewayAccessible) {
                    Alert.show(resourceManager.getString('gptStrings', 'finddata.noRightsForServiceUsage'));
                } else {
                    useServiceWithFlexClient(gatewayUrl, requestedUrl);
                }
            } else {
                useServiceWithFlexClient(requestedUrl, requestedUrl);
            }
        } else {
            var errorCode:String = data.errorCode;
            var errorMessage:String = data.errorMessage;
            Alert.show(errorCode + " " + errorMessage, resourceManager.getString('gptStrings', 'finddata.errorOccurred'));
        }
    }
    ]]>
</mx:Script>

<mx:HBox>
  <mx:SWFLoader id="swfLoading" 
     source="assets/images/loader.swf" 
     visible="false" />
  <mx:Text 
  styleName="WidgetTitle"
  text="{Utils.truncateString(_record.title, 50)}" 
  htmlText="true"/>
</mx:HBox>

<mx:TextArea 
  editable="false"
  width="{_width}"
  height="70"
  text="{Utils.truncateString(_record.abstract, 255)}" 
  htmlText="true"/>

<mx:Tile direction="horizontal" width="{_width}">
  <mx:Repeater id="rptLinks"  
    dataProvider="{FindDataWidget.agsGptRssModel.removeExcludedLinks(_record, endPoint)}">
    <mx:LinkButton
      styleName="ControllerLinkButton"
      label="{rptLinks.currentItem.siteName}" 
	  click="linkButtonClickHandler(event)"/>
  </mx:Repeater>
  <!-- mx:Canvas visible="{btnAddToMap.visible}" -->
  <mx:Canvas visible="{btnAddToMap.visible}">
   <mx:LinkButton
      id="btnAddToMap" 
      styleName="ControllerLinkButton"
      label="{resourceManager.getString('gptStrings','finddata.lblAddToMap')}" 
      visible="{_bShowAddToMap}"
      click="linkButtonClickHandler(event)"/>
    <mx:SWFLoader id="swfAddToMap" 
      source="assets/images/loader.swf" 
      visible="false" />
  </mx:Canvas>
 
</mx:Tile>
</mx:VBox>
